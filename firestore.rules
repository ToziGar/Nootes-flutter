rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthed() { return request.auth != null; }
    function isOwner(uid) { return isAuthed() && request.auth.uid == uid; }

    // Public user profile search (limited fields)
    // For the app's share/search features, allow authenticated users to read user profiles.
    // Writes remain restricted to the document owner.
    match /users/{uid} {
      // Allow both single-doc gets and queries (list) for authed users
      allow read: if isAuthed();
      // Writes only by owner
      allow create, update, delete: if isOwner(uid);
    }

    // Notes: owner or accepted shared recipient can read; only owner edits (simpler)
    match /users/{uid}/notes/{noteId} {
      allow read: if isOwner(uid) || exists(/databases/$(database)/documents/shared_items/$(request.auth.uid + '_' + uid + '_' + noteId)) &&
        get(/databases/$(database)/documents/shared_items/$(request.auth.uid + '_' + uid + '_' + noteId)).data.status == 'accepted';
      allow create, update, delete: if isOwner(uid);
    }

    // Folders basic
    match /users/{uid}/folders/{folderId} {
      allow read, write: if isOwner(uid);
    }

    // Handles lookup
    match /handles/{username} {
      allow read: if true;
      allow write: if isAuthed() && request.resource.data.uid == request.auth.uid;
    }

    // Shared items with deterministic ID: recipient_owner_item
    match /shared_items/{shareId} {
      allow create: if isAuthed() &&
        request.resource.data.ownerId == request.auth.uid &&
        shareId == (request.resource.data.recipientId + '_' + request.resource.data.ownerId + '_' + request.resource.data.itemId);

      // Allow reads if authenticated and either:
      // - the doc doesn't exist (so clients can check if a share already exists), or
      // - the requester is the owner or the recipient
      allow get: if isAuthed() && (
        !exists(/databases/$(database)/documents/shared_items/$(shareId)) ||
        (resource.data.ownerId == request.auth.uid || resource.data.recipientId == request.auth.uid)
      );
      allow list: if isAuthed();

      // Owner can update permission or status; recipient can update status only
      allow update: if isAuthed() && (
        (resource.data.ownerId == request.auth.uid && request.resource.data.diff(resource.data).changedKeys().hasOnly(['permission','status','updatedAt'])) ||
        (resource.data.recipientId == request.auth.uid && request.resource.data.diff(resource.data).changedKeys().hasOnly(['status','updatedAt']))
      );

      allow delete: if isAuthed() && resource.data.ownerId == request.auth.uid;
    }

    // Public links: readable by anyone, writable by owner
    match /public_links/{token} {
      allow read: if true;
      allow create, update, delete: if isAuthed() && request.resource.data.ownerId == request.auth.uid;
    }
  }
}